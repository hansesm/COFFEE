name: Build, Test and Push COFFEE Artifact

on:
  push:
    branches: [ main, dev ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/coffee

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: { contents: read }
    steps:
      - uses: actions/checkout@v4
      - name: Read Python version
        id: python-version
        run: echo "PYTHON_VERSION=$(cat .python-version)" >> $GITHUB_ENV
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Set up Python ${{ env.PYTHON_VERSION }} via uv
        run: uv python install ${{ env.PYTHON_VERSION }}
      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-${{ env.PYTHON_VERSION }}-${{ hashFiles('uv.lock', 'pyproject.toml') }}
          restore-keys: |
            uv-${{ env.PYTHON_VERSION }}-
      - name: Sync deps
        run: uv sync --all-extras --dev
      - name: Build
        run: uv build
  test:
    runs-on: ubuntu-latest
    permissions: { contents: read }
    steps:
      - uses: actions/checkout@v4
      - name: Read Python version
        id: python-version
        run: echo "PYTHON_VERSION=$(cat .python-version)" >> $GITHUB_ENV
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Set up Python ${{ env.PYTHON_VERSION }} via uv
        run: uv python install ${{ env.PYTHON_VERSION }}
      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-${{ env.PYTHON_VERSION }}-${{ hashFiles('uv.lock', 'pyproject.toml') }}
          restore-keys: |
            uv-${{ env.PYTHON_VERSION }}-
      - name: Sync deps
        run: uv sync --all-extras --dev
      - name: Django checks
        run: uv run task check
      - name: Django tests
        run: uv run task test

  docker:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/') && (github.ref_name == 'main' || github.ref_name == 'dev')
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    - name: Read project version via uv
      id: version
      run: echo "VERSION=$(uv version --short)" >> $GITHUB_ENV
    - name: Compute image tags
      id: tags
      run: |
        if [ "${GITHUB_REF_NAME}" = "dev" ]; then
          echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-dev" >> $GITHUB_OUTPUT
        else
          echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.tags.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  scan:
    needs: [ docker ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Read project version via uv
        id: version
        run: echo "VERSION=$(uv version --short)" >> $GITHUB_ENV
      - name: Compute image tags
        id: tags
        run: |
          if [ "${GITHUB_REF_NAME}" = "dev" ]; then
            echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-dev" >> $GITHUB_OUTPUT
          else
            echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}" >> $GITHUB_OUTPUT
          fi
      - name: Run security scan
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ steps.tags.outputs.tags }}
          format: 'sarif'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
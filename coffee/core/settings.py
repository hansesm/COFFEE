"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os, random, string
from pathlib import Path
from urllib.parse import quote_plus

from dotenv import load_dotenv

load_dotenv()  # take environment variables from .env.

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")
if not SECRET_KEY:
    SECRET_KEY = "".join(random.choice(string.ascii_lowercase) for i in range(32))

# Check for Debug-Var
DEBUG = os.environ.get("DEBUG")
if not DEBUG:
    DEBUG = "False"

from django.utils.translation import gettext_lazy as _

# Application Version
APP_VERSION = "1.3"

# Enable internationalization
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Logging configuration
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': LOG_LEVEL,
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        'coffee.home': {
            'handlers': ['console'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
    },
}

# Define available languages
LANGUAGES = [
    ("en", "English"),
    ("de", "Deutsch"),
    # Add more languages as needed
]

# Set the path for locale files
LOCALE_PATHS = [
    os.path.join(BASE_DIR, "locale/"),
]

# Set the default language
LANGUAGE_CODE = "en"

ALLOWED_HOSTS = [
    "https://feeedback-impact.fernuni-hagen.de",
    "https://coffee.fernuni-hagen.de",
    "http://localhost",
    "https://localhost",
    "http://127.0.0.1",
    "https://127.0.0.1",
    "127.0.0.1",
    "feedback-impact.fernuni-hagen.de",
    "coffee.fernuni-hagen.de",
    "localhost",
    "localhost:8000",
    "localhost:8001",
    "testserver",  # For Django tests
]

CSRF_TRUSTED_ORIGINS = [
    "https://feedback-impact.fernuni-hagen.de",
    "https://coffee.fernuni-hagen.de",
    "http://localhost",
    "https://localhost",
    "http://127.0.0.1",
    "https://127.0.0.1",
]

# Application definition

INSTALLED_APPS = [
    "django_extensions",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "whitenoise.runserver_nostatic",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "coffee.home",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
]

ROOT_URLCONF = "coffee.core.urls"

HOME_TEMPLATES = os.path.join(BASE_DIR, "home", "templates")

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [HOME_TEMPLATES],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "coffee.home.context_processors.add_is_manager",
                "coffee.home.context_processors.app_version",
                "django.template.context_processors.i18n",
            ],
        },
    },
]

WSGI_APPLICATION = "coffee.core.asgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

import dj_database_url

DB_PROTOCOL = os.getenv("DB_PROTOCOL", "sqlite")
DB_USERNAME = os.getenv("DB_USERNAME", "")
DB_PASSWORD = os.getenv("DB_PASSWORD", "")
DB_HOST     = os.getenv("DB_HOST", "")
DB_PORT     = os.getenv("DB_PORT", "")
DB_NAME     = os.getenv("DB_NAME", "")


def build_database_url() -> str:
    """
    Baut eine DATABASE_URL aus Einzelteilen und encodet sensible Felder.
    """
    if not DB_NAME:
        return ""

    user = quote_plus(DB_USERNAME) if DB_USERNAME else ""
    pwd  = quote_plus(DB_PASSWORD) if DB_PASSWORD else ""
    auth = f"{user}:{pwd}@" if user or pwd else ""
    host = DB_HOST or "localhost"
    port = f":{DB_PORT}" if DB_PORT else ""
    db   = quote_plus(DB_NAME)

    return f"{DB_PROTOCOL}://{auth}{host}{port}/{db}"

if DB_PROTOCOL != "sqlite":
    DATABASES = {
        'default': dj_database_url.parse(build_database_url())
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR.parent / "db.sqlite3",
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "de-de"

TIME_ZONE = "Europe/Berlin"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")  
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]
STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

# if not DEBUG:
#    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_REDIRECT_URL = "/"
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

SESSION_ENGINE = "django.contrib.sessions.backends.db"
SESSION_COOKIE_AGE = 1209600  # Two weeks
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_SAMESITE = 'None'
SESSION_COOKIE_SAMESITE = 'None'

# Allow iframe embedding
X_FRAME_OPTIONS = 'ALLOWALL'  # Allows embedding in any iframe
# Alternative: X_FRAME_OPTIONS = 'SAMEORIGIN'  # Only allow same-origin iframes

# Graphviz Configuration
GRAPH_MODELS = {
  'app_labels': ["home", "auth"],
}

# Ollama API Configuration
OLLAMA_PRIMARY_HOST = os.getenv("OLLAMA_PRIMARY_HOST", "")
OLLAMA_PRIMARY_AUTH_TOKEN = os.getenv("OLLAMA_PRIMARY_AUTH_TOKEN", "")
OLLAMA_PRIMARY_VERIFY_SSL = os.getenv("OLLAMA_PRIMARY_VERIFY_SSL", "True").lower() == "true"
OLLAMA_FALLBACK_HOST = os.getenv("OLLAMA_FALLBACK_HOST", "")
OLLAMA_FALLBACK_AUTH_TOKEN = os.getenv("OLLAMA_FALLBACK_AUTH_TOKEN", "")
OLLAMA_FALLBACK_VERIFY_SSL = os.getenv("OLLAMA_FALLBACK_VERIFY_SSL", "True").lower() == "true"
OLLAMA_MODEL_NAMES = os.getenv("OLLAMA_MODEL_NAMES", "phi4:latest")
OLLAMA_REQUEST_TIMEOUT = int(os.getenv("OLLAMA_REQUEST_TIMEOUT", "300"))  # 5 minutes default
OLLAMA_ENABLE_FALLBACK = os.getenv("OLLAMA_ENABLE_FALLBACK", "True").lower() == "true"

# Azure OpenAI Configuration
AZURE_OPENAI_API_VERSION = os.getenv("AZURE_OPENAI_API_VERSION", "2024-12-01-preview")
AZURE_OPENAI_ENDPOINT = os.getenv("AZURE_OPENAI_ENDPOINT", "")
AZURE_OPENAI_API_KEY = os.getenv("AZURE_OPENAI_API_KEY", "")
AZURE_OPENAI_DEPLOYMENT_NAME = os.getenv("AZURE_OPENAI_DEPLOYMENT_NAME", "gpt-4o")
AZURE_OPENAI_DEPLOYMENT_NAMES = os.getenv("AZURE_OPENAI_DEPLOYMENT_NAMES", "gpt-4o").split(",")
AZURE_OPENAI_MAX_TOKENS = int(os.getenv("AZURE_OPENAI_MAX_TOKENS", "2000"))
AZURE_OPENAI_TEMPERATURE = float(os.getenv("AZURE_OPENAI_TEMPERATURE", "0.7"))

# Azure AI Inference Configuration
AZURE_AI_ENDPOINT = os.getenv("AZURE_AI_ENDPOINT", "")
AZURE_AI_API_KEY = os.getenv("AZURE_AI_API_KEY", "")
AZURE_AI_API_VERSION = os.getenv("AZURE_AI_API_VERSION", "2024-05-01-preview")
AZURE_AI_MODEL_NAMES = os.getenv("AZURE_AI_MODEL_NAMES", "Phi-4").split(",")
AZURE_AI_MAX_TOKENS = int(os.getenv("AZURE_AI_MAX_TOKENS", "2048"))
AZURE_AI_TEMPERATURE = float(os.getenv("AZURE_AI_TEMPERATURE", "0.8"))
AZURE_AI_TOP_P = float(os.getenv("AZURE_AI_TOP_P", "0.1"))
AZURE_AI_PRESENCE_PENALTY = float(os.getenv("AZURE_AI_PRESENCE_PENALTY", "0.0"))
AZURE_AI_FREQUENCY_PENALTY = float(os.getenv("AZURE_AI_FREQUENCY_PENALTY", "0.0"))

# LLM Backend Display Names
LLM_BACKEND_DISPLAY_NAMES = {
    'ollama': os.getenv("LLM_OLLAMA_DISPLAY_NAME", "Ollama"),
    'azure_openai': os.getenv("LLM_AZURE_OPENAI_DISPLAY_NAME", "Azure OpenAI"),
    'azure_ai': os.getenv("LLM_AZURE_AI_DISPLAY_NAME", "Azure AI"),
}